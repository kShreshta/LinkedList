package LinkedList;
import java.util.*;
public class Link1 {
	Node head;
	private int size;
	Link1(){
		size=0;
	}
	public class Node{
		String data;
		Node next;
		Node(String data){
			this.data=data;
			this.next=null;
			size++;
		}
	}
	public void addFirst(String data) {
		Node newNode=new Node(data);
		newNode.next=head;
		head=newNode;
	}
	public void addLast(String data) {
		Node newNode=new Node(data);
		if(head==null) {
			head=newNode;
			return;
		}
		Node lastNode=head;
		while(lastNode.next !=null){
			lastNode =lastNode.next;
		}
		lastNode.next=newNode;
	}
	public void printList() {
		Node currNode=head;
		while(currNode !=null) {
			System.out.print(currNode.data+" -> ");
			currNode=currNode.next;
		}
		System.out.println("null");
	}
	public void removefirst() {
		if(head==null) {
			System.out.println("Empty List, nothing to delete");
			return;
		}
		head=this.head.next;
		size--;
	}
	public void removeLast() {
		if(head==null) {
			System.out.println("Empty List, nothing to delete");
			return;
		}
		size--;
		if(head.next==null) {
			head=null;
			return;
		}
		Node currNode=head;
		Node lastNode=head.next;
		while(lastNode.next != null) {
			currNode = currNode.next;
	        lastNode = lastNode.next;
		}
		currNode.next = null;
	}
	public int getsize() {
		return size;
	}
	public Node reverseRecursive(Node head) {
		if(head==null || head.next==null) {
			return head;
		}
		Node newHead=reverseRecursive(head.next);
		head.next.next=head;
		head.next=null;
		return newHead;
		
	}
	public void reverseList() {
		if(head==null || head.next==null) {
			return;
		}
		Node prevNode=head;
		Node currNode=head.next;
		while(currNode!=null) {
			Node nextNode=currNode.next;
			currNode.next=prevNode;
			prevNode=currNode;
			currNode=nextNode;
		}
		head.next=null;
		head=prevNode;
	}
	public void addInMiddle(int index, String data) {
        if (index > size || index < 0) {
            System.out.println("Invalid Index value");
            return;
        }
        size++;

        Node newNode = new Node(data);
        if (head == null || index == 0) {
            newNode.next = head;
            head = newNode;
            return;
        }
        Node currNode = head;
        for (int i = 1; i < size; i++) {
            if (i == index) {
                Node nextNode = currNode.next;
                currNode.next = newNode;
                newNode.next = nextNode;
                break;
            }
            currNode = currNode.next;
        }
    }
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Link1 list = new Link1();
		list.addLast("is");
	    list.addLast("a");
	    list.addLast("list");
	    list.printList();


	    list.addFirst("this");
	    list.printList();
	    System.out.println(list.getsize());
	    list.removefirst();
	    list.printList();


	    list.removeLast();
	    list.printList();
	    list.addInMiddle(1,"sheshu");
	    list.printList();
	    
	    list.reverseList();
	    list.printList();
	    list.head=list.reverseRecursive(list.head);
	    list.printList();

	}

}
